// Declare a "SerialPort" object
let serialOne, serialTwo;
//serialOne is left USB port on this mac, used for AxiDraw
//serialTwo is right USB port on this mac, used for Arduino
let curtains;
//let latestDataOne = "waiting for data";
let latestDataTwo = "waiting for data"; // you'll use this to write incoming data to the canvas
let l1_brightness;
let l2_brightness;
let o_rpercent, o_gpercent, o_bpercent;
let f_rpercent, f_gpercent, f_bpercent;
let o_moveRight, o_moveLeft, o_moveUp, o_moveDown;
let f_moveRight, f_moveLeft;
var time = 1000;
var small_neg_step = -1000;
var small_pos_step = 1000;
var med_step = 4000;
var big_step = 10000;
let stop = false;
let moving = false;
let front_spin = 0;
let sel;
let motor = 0;


function preload(){
  curtains = loadImage("curtains.jpeg");
  //full screen dims: 2556 × 1446
  
}

function setup() {
  createCanvas(windowWidth, windowHeight);
  
  c1 = color(255, 0, 0);
  c2 = color(127, 127, 127);
  c3 = color(0,255,0);
  c4 = color(0,0,255);
  c5 = color(255,255,255);
  c6 = color(0,0,0);
  

  // Instantiate our SerialPort object
  serialOne = new p5.SerialPort();
  serialTwo = new p5.SerialPort();

  // Get a list the ports available
  // You should have a callback defined to see the results
  serialOne.list();

  // Assuming our Arduino is connected, let's open the connection to it
  // Change this to the name of your arduino's serial port
  serialOne.open("/dev/tty.usbmodem14101");
  serialTwo.open("/dev/tty.usbmodem14201")

  // Here are the callbacks that you can register
  // When we connect to the underlying server
  serialOne.on('connected', serverConnected);
  serialTwo.on('connected', serverConnected);

  // When we get a list of serial ports that are available
  serialOne.on('list', gotList);

  // When we some data from the serial port
  serialTwo.on('data', gotDataTwo);

  // When or if we get an error
  serialOne.on('error', gotError);
  serialTwo.on('error', gotError);

  // When our serial port is opened and ready for read/write
  serialOne.on('open', gotOpen);
  serialTwo.on('open', gotOpen);

  serialOne.on('close', gotClose);
  serialTwo.on('close', gotClose);

  //brightness sliders
  //(height / 4) - 30
  l1_brightness = createSlider(0, 255, 10);
  l1_brightness.position(width / 6 - 50, (height / 4) -50);
  l2_brightness = createSlider(0, 255, 10);
  l2_brightness.position(width / 6 + 780, (height / 4) - 50);

  //overhead sliders for color
  //(height / 5) + 150,(height / 5) + 310, (height / 5) + 475
  o_rpercent = createSlider(0, 255, 10);
  o_rpercent.position(width / 6 - 50, (height / 5) + 150);
  o_gpercent = createSlider(0, 255, 10);
  o_gpercent.position(width / 6 - 50, (height / 5) + 310);
  o_bpercent = createSlider(0, 255, 10);
  o_bpercent.position(width / 6 - 50, (height / 5) + 475);

  //front sliders for color
  f_rpercent = createSlider(0, 255, 10);
  f_rpercent.position(width / 6 + 780, (height / 5) + 150);
  f_gpercent = createSlider(0, 255, 10);
  f_gpercent.position(width / 6 + 780, (height / 5) + 310);
  f_bpercent = createSlider(0, 255, 10);
  f_bpercent.position(width / 6 + 780, (height / 5) + 475);

  //select drop down for which motor to control
  sel = createSelect();
  sel.position(width /2 -60, height / 2 +50);
  sel.option('None');
  sel.option('Front Light');
  sel.option('Overhead Light');
  sel.changed(motorSelect);

  //enable the overhead motor
  serialOne.write('EM,2' + '\r');

}

function motorSelect() {
  let m = sel.value();
  //console.log(m);
  if (m == 'Overhead Light') {
    motor = 1;
    //console.log(m);
  } else if (m == 'Front Light') {
    motor = 2;
    //console.log(m);
  }

}

// We are connected and ready to go
function serverConnected() {
  print("Connected to Server");
}

// Got the list of ports
function gotList(thelist) {
  print("List of Serial Ports:");
  // theList is an array of their names
  for (let i = 0; i < thelist.length; i++) {
    // Display in the console
    print(i + " " + thelist[i]);
  }
}

// Connected to our serial device
function gotOpen() {
  print("Serial Port is Open");
}

function gotClose() {
  print("Serial Port is Closed");
  latestData = "Serial Port is Closed";
}

// Uh oh, here is an error, let's log it
function gotError(theerror) {
  print(theerror);
}


// There is data available to work with from the serial port
function gotDataTwo() {
  let currentString = serialTwo.readStringUntil("\r\n"); // read the incoming string
  //trim(currentString); // remove any trailing whitespace
  if (!currentString) return; // if the string is empty, do no more
  console.log(currentString); // print the string
  latestDataTwo = currentString; // save it for the draw method
}

// We got raw from the serial port
function gotRawData(thedata) {
  print("gotRawData" + thedata);
  
  
}


function draw() {
  
  //web page aesthetics and text labels
  image(curtains,0,0,1300,1000);
  stroke(255);
  fill('black');
  //text box backgrounds
  rect(width / 6-150,height / 8-20,width/4,height-180);
  rect(width / 6+685,height / 8-20,width/4,height-180);
  rect(width / 2-151,height / 2-20,width/4-25,height/2 -270);
  rect(width/2 - 222, height/2+155,width/4+125,height/2 -250);
  line(width/2-216,height/2+190,width/2+216,height/2+190);
  line(width/2-185,height/2+240,width/2+185,height/2+240);
  line(width/2-165,height/2+265,width/2+165,height/2+265);
  textAlign(CENTER, CENTER);
  textSize(32);
  fill('white');
  text('Welcome to the L.I.V.E. Tool!', width/2,30);
  textSize(20);
  text('Please do not touch the overhead light structure.' +'\n'+'\n'+
       'Pause briefly between motor movements'+'\n'+'controlled with a simple joystick flick.',width/2,height/2+220);
  textSize(24);
  text('Select which light to move: ', width/2,height/2);
  text('Overhead Light Brightness', width / 6 + 10, height / 8);
  text('Front Light Brightness', width / 6 + 850, height / 8);
  text('Overhead Light Red %', width / 4 - 100, height / 6 + 120);
  text('Overhead Light Green %', width / 4- 100, height / 4 + 225);
  text('Overhead Light Blue %', width / 4 -100 , height - 220);
  text('Front Light Red %', width / 6 + 850, height / 6 + 120);
  text('Front Light Green %', width / 6 + 850, height / 4 + 225);
  text('Front Light Blue %', width / 6 + 850, height - 220);
  
  //overhead light color gradients
  setGradient(width/4-200, (height / 8)+20, 210, 20, c6, c5);
  setGradient(width/4-200, (height/4)+70, 210, 20, c2, c1);
  setGradient(width/4-200, (height/4)+240, 210, 20, c2, c3);
  setGradient(width/4-200, height - 200, 210, 20, c2, c4);

  
  //front light color gradients
  setGradient(width/6+750, (height / 8)+20, 210, 20, c6, c5);
  setGradient(width/6+750, (height/4)+70, 210, 20, c2, c1);
  setGradient(width/6+750, (height/4)+240, 210, 20, c2, c3);
  setGradient(width/6+750, height - 200, 210, 20, c2, c4);
  
  //if the Arduino has written a move from the joystick to serial, moving is true and we use the joystick function to move the appropriate light then immediately set this boolean back to false and continue checking for color/brightness changes 
  if (moving) {
    joyStick();
   
    moving = false;
    frontspin = 0;
  } else if (!moving) {
    sliderWrite();
    setOHLightColor();
    setFRLightColor();
  }


  if (serialOne.available() > 0){

    joyStick();

  } else joystickReset();

}

function setGradient(x, y, w, h, c1, c2) {

  noFill();

    for (var i = x; i <= x+w; i++) {
      var inter = map(i, x, x+w, 0, 1);
      var c = lerpColor(c1, c2, inter);
      stroke(c);
      line(i, y, i, y+h);
    }
  
}

function setOHLightColor() {
  o_r_val = o_rpercent.value();
  outByte3 = int(o_r_val);
  o_g_val = o_gpercent.value();
  outByte4 = int(o_g_val);
  o_b_val = o_bpercent.value();
  outByte5 = int(o_b_val);
  serialTwo.write(outByte3 + 'C');
  serialTwo.write(outByte4 + 'D');
  serialTwo.write(outByte5 + 'E');
}

function setFRLightColor() {
  f_r_val = f_rpercent.value();
  outByte6 = int(f_r_val);
  f_g_val = f_gpercent.value();
  outByte7 = int(f_g_val);
  f_b_val = f_bpercent.value();
  outByte8 = int(f_b_val);
  serialTwo.write(outByte6 + 'F');
  serialTwo.write(outByte7 + 'G');
  serialTwo.write(outByte8 + 'H');
}

function joyStick() {
  if (motor == 1) {
    if (latestDataTwo == 'move left') {
      serialOne.write('SM,' + time + ',' + small_neg_step + ',' + small_neg_step + '\r');
      latestDataTwo = 'Done';
    } else if (latestDataTwo == 'move right') {
      serialOne.write('SM,' + time + ',' + small_pos_step + ',' + small_pos_step + '\r');
      latestDataTwo = 'Done';
    } else if (latestDataTwo == 'move down') {
      serialOne.write('SM,' + time + ',' + small_pos_step + ',' + small_neg_step + '\r');
      latestDataTwo = 'Done';
    } else if (latestDataTwo == 'move up') {
      serialOne.write('SM,' + time + ',' + small_neg_step + ',' + small_pos_step + '\r');
      latestDataTwo = 'Done';
    }
  }
  else if(motor==2){
    if (latestDataTwo == 'move left'){
    moving = true;
    front_spin = 5;
    }
    else if (latestDataTwo == 'move right'){
    moving = true;
    front_spin =3;
    }
    if (front_spin == 3){
      serialTwo.write('v' + '\r');
      moving =false;
      front_spin = 0;
      latestDataTwo = 'done';
    }
    else if (front_spin ==5){
      serialTwo.write('n'+'\r');
      moving = false;
      front_spin = 0;
      latestDataTwo = 'done';
    }

  }
  
  return front_spin;
  
}

function joystickReset() {
  console.log('done');
  //console.log(width,height);
}

function sliderWrite() {
  l1_val = l1_brightness.value();
  outByte1 = int(l1_val);
  l2_val = l2_brightness.value();
  outByte2 = int(l2_val);
  serialTwo.write(outByte1 + 'A');
  serialTwo.write(outByte2 + 'B');

}
